{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pandas'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-a3d7b2290de5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pandas'"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data(filename):\n",
    "    with open(filename) as f:\n",
    "        data = json.load(f)\n",
    "        map_all, map_part = [], []\n",
    "        ndcg_all, ndcg_part = [], []\n",
    "        for query_id, results in data.items():\n",
    "            query_id = int(query_id)\n",
    "            for metric, value in results.items():\n",
    "                if metric == \"map\":\n",
    "                    map_all.append(value)\n",
    "                    if query_id > 75 and query_id < 101:\n",
    "                        map_part.append(value)\n",
    "                else:\n",
    "                    ndcg_all.append(value)\n",
    "                    if query_id > 75 and query_id < 101:\n",
    "                        ndcg_part.append(value)\n",
    "                        \n",
    "    map_all = np.asarray(map_all)\n",
    "    map_part = np.asarray(map_part)\n",
    "    ndcg_all = np.asarray(ndcg_all)\n",
    "    ndcg_part = np.asarray(ndcg_part)\n",
    "    \n",
    "    av_map_all = np.mean(map_all)\n",
    "    av_map_part = np.mean(map_part)\n",
    "    av_ndcg_all = np.mean(ndcg_all)\n",
    "    av_ndcg_part = np.mean(ndcg_part)\n",
    "    \n",
    "    return av_map_all, av_map_part, av_ndcg_all, av_ndcg_part\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.007459851728310039,\n",
       " 0.005618006381502093,\n",
       " 0.30689016809278175,\n",
       " 0.30213314225476523)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_200_10_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.003996278433290387,\n",
       " 0.0033300050463312613,\n",
       " 0.29321829220546913,\n",
       " 0.2916408393852883)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_10_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0030199604493070086,\n",
       " 0.0022097057350158236,\n",
       " 0.2769300174252696,\n",
       " 0.27550435977606497)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_400_10_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.003367026080151662,\n",
       " 0.0023574350785883686,\n",
       " 0.2772686411942839,\n",
       " 0.277453661228135)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_500_10_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.00456477162173752,\n",
       " 0.0038100451503039266,\n",
       " 0.29098933707746066,\n",
       " 0.2885104932153718)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_5_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.005310948159247696,\n",
       " 0.0023261443197352028,\n",
       " 0.2776556652132153,\n",
       " 0.274913516395257)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_15_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0024884134478207597,\n",
       " 0.0018065795852665325,\n",
       " 0.27189230500097233,\n",
       " 0.26933943146364936)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_20_50000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.00513540653972604,\n",
       " 0.001517402581720041,\n",
       " 0.3046645196649008,\n",
       " 0.2814459827847753)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_10_10000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.004480818948275468,\n",
       " 0.0021720467072405577,\n",
       " 0.2951504585452324,\n",
       " 0.28105536395776315)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_10_25000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.003098063813818612,\n",
       " 0.0026661593805887597,\n",
       " 0.28870838561988926,\n",
       " 0.28585686065886)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_10_100000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.003000165562837906,\n",
       " 0.00232257243547391,\n",
       " 0.2867162044361968,\n",
       " 0.28206019858069176)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_data(\"./results/doc2vec_300_10_200000.model.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def t_test(results1, results2, metric):\n",
    "    with open(results1) as f1, open(results2) as f2:\n",
    "        first_results = json.load(f1)\n",
    "        second_results = json.load(f2)\n",
    "        query_ids = list(set(first_results.keys()) & set(second_results.keys()))\n",
    "        first_scores = [first_results[query_id][metric] for query_id in query_ids]\n",
    "        second_scores = [second_results[query_id][metric] for query_id in query_ids]\n",
    "        print(stats.ttest_rel(first_scores, second_scores))\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_relResult(statistic=-9.938604421239544, pvalue=3.79869627055957e-18)\n"
     ]
    }
   ],
   "source": [
    "t_test(\"./results/word2vec_all.json\", \"./results/LSI_tfidf_and_500_topics.json\", 'map')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PRINTING EXTREMES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import read_ap as ra\n",
    "import pprint as pprint\n",
    "\n",
    "qrels, queries = ra.read_qrels()\n",
    "\n",
    "def query_MAP_extremes(path, model_type):\n",
    "    with open(path) as f:\n",
    "        data = json.load(f)\n",
    "        map_scores = []\n",
    "        for qid, results in data.items():\n",
    "            map_scores.append( (qid, queries[qid].strip(), 'MAP score: ' + str( round(results['map'], 4)) )  )\n",
    "\n",
    "        map_scores = sorted(map_scores, key=lambda x: x[2], reverse=True)\n",
    "        print('BEST QUERIES {}'.format(model_type))\n",
    "        pprint(map_scores[:5])\n",
    "        print('WORST QUERIES {}'.format(model_type))\n",
    "        pprint(map_scores[-5:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BEST QUERIES word2vec\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'pprint' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-5c409a4a47b8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mquery_MAP_extremes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"./results/word2vec.json\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'word2vec'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-13-d8948074914e>\u001b[0m in \u001b[0;36mquery_MAP_extremes\u001b[0;34m(path, model_type)\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0mmap_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap_scores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'BEST QUERIES {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mpprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'WORST QUERIES {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mpprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pprint' is not defined"
     ]
    }
   ],
   "source": [
    "query_MAP_extremes(\"./results/word2vec.json\", 'word2vec')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
